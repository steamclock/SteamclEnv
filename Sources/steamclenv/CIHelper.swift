//
//  CIHelper.swift
//  
//
//  Created by Brendan Lensink on 2023-03-28.
//

import ArgumentParser
import Foundation

enum CISource: String, ExpressibleByArgument {
    case bitrise
    case xcode

    var name: String {
        switch self {
        case .bitrise: return "Bitrise"
        case .xcode: return "Xcode Cloud"
        }
    }
}

extension SteamclEnv {
    struct CIHelper: ParsableCommand {
        @Argument(help: "The CI tool you want to generate a build script for.")
        var ciSource: CISource

        @Option(
          name: .shortAndLong,
          help: "Full path to your example environment file, including file name, if you don't want to use the default. Relative to the current directory."
        )
        var examplePath: String?

        @Option(
          name: .long,
          help: "A list of your environment variable keys, separated by commas. You can use this rather than passing in a .env.example file if desired."
        )
        var environmentKeys: String?

        @Option(
          name: .shortAndLong,
          help: "Full path you'd like to output your finished environment file to, including filename."
        )
        var outputPath: String?

        func run() throws {
            let fileManager = FileManager.default
            Logger.shared.log("Generating build script for \(ciSource.name)")

            let path = examplePath ?? "\(fileManager.currentDirectoryPath)/.env.example"
            let exampleExists = fileManager.fileExists(atPath: path)

            guard exampleExists || environmentKeys != nil else {
                throw SteamclEnvError.missingKeys
            }

            var envKeys = [String]()

            if let keys = environmentKeys {
                envKeys = keys
                    .trimmingCharacters(in: .whitespaces)
                    .split(separator: ",")
                    .map { String($0) }
            } else if exampleExists {
                guard let fileData = fileManager.contents(atPath: path),
                      let fileString = String(data: fileData, encoding: .utf8) else {
                    throw SteamclEnvError.envNotFound
                }

                envKeys = fileString.components(separatedBy: .newlines)
            }

            guard !envKeys.isEmpty else { throw SteamclEnvError.missingKeys }

            let contents = envKeys.reduce(into: "") { result, line in
                let key = line.replacingOccurrences(of: "=", with: "")
                result += "\(key)=$\(key)\n"
            }

            switch ciSource {
            case .bitrise: try writeBitriseScript(for: contents)
            case .xcode: try writeXcodeScript(for: contents)
            }
        }

        private func writeBitriseScript(for contents: String) throws {
            let output = """
            # This script was automatically generated by SteamclEnv.
            # To use this, create a new step Script in your Bitrise Workflow before your xcodebuild step and paste in this.
            # You can delete this reminder when you're done.

            printf "\(contents)" >| "./.env"

            swift run steamclenv generate

            exit 0
            """

            let fileOutputPath = "\(FileManager.default.currentDirectoryPath)/bitrise.sh"
            Logger.shared.log("Outputting script to \(fileOutputPath). You'll want to copy the contents of this file into your Bitrise Script step.")
            try output.write(toFile: fileOutputPath, atomically: true, encoding: .utf8)
        }

        private func writeXcodeScript(for contents: String) throws {
            let outputPath = outputPath ?? "../"

            let output = """
            #!/bin/sh

            echo "Writing .env file to current directory..."

            printf "\(contents)" >| "./.env"

            echo "Wrote .env file. Running steamclenv generate..."

            # We're in the ./ci_scripts folder here, so need to step up one level to output our file
            swift run steamclenv generate --output-path "\(outputPath)"

            exit 0
            """

            let fileOutputPath = "\(FileManager.default.currentDirectoryPath)/ci_pre_xcodebuild.sh"
            Logger.shared.log("Outputting script to \(fileOutputPath). You'll want to move this into your `ci_scripts` folder.")
            try output.write(toFile: fileOutputPath, atomically: true, encoding: .utf8)
        }
    }
}
